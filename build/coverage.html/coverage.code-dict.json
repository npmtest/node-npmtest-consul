{"/home/travis/build/npmtest/node-npmtest-consul/test.js":"/* istanbul instrument in package npmtest_consul */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-consul/lib.npmtest_consul.js":"/* istanbul instrument in package npmtest_consul */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_consul = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_consul = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-consul/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-consul && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_consul */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_consul\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_consul.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_consul.rollup.js'] =\n            local.assetsDict['/assets.npmtest_consul.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_consul.__dirname + '/lib.npmtest_consul.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/index.js":"/**\n * Module index\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Consul = require('./consul').Consul;\n\n/**\n * Module exports.\n */\n\nmodule.exports = Consul;\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/consul.js":"/**\n * Consul client\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar papi = require('papi');\nvar util = require('util');\n\nvar Acl = require('./acl').Acl;\nvar Agent = require('./agent').Agent;\nvar Catalog = require('./catalog').Catalog;\nvar Event = require('./event').Event;\nvar Health = require('./health').Health;\nvar Kv = require('./kv').Kv;\nvar Lock = require('./lock').Lock;\nvar Query = require('./query').Query;\nvar Session = require('./session').Session;\nvar Status = require('./status').Status;\nvar Watch = require('./watch').Watch;\nvar constants = require('./constants');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Consul` client.\n */\n\nfunction Consul(opts) {\n  if (!(this instanceof Consul)) {\n    return new Consul(opts);\n  }\n\n  opts = utils.defaults({}, opts);\n\n  if (!opts.baseUrl) {\n    opts.baseUrl = (opts.secure ? 'https:' : 'http:') + '//' +\n      (opts.host || '127.0.0.1') + ':' +\n      (opts.port || '8500') + '/v1';\n  }\n  opts.name = 'consul';\n  opts.type = 'json';\n\n  if (opts.defaults) {\n    var rawDefaults = utils.normalizeKeys(opts.defaults);\n    var defaults;\n\n    constants.DEFAULT_OPTIONS.forEach(function(key) {\n      if (!rawDefaults.hasOwnProperty(key)) return;\n      if (!defaults) defaults = {};\n      defaults[key] = rawDefaults[key];\n    });\n\n    if (defaults) this._defaults = defaults;\n  }\n  delete opts.defaults;\n\n  papi.Client.call(this, opts);\n\n  this.acl = new Consul.Acl(this);\n  this.agent = new Consul.Agent(this);\n  this.catalog = new Consul.Catalog(this);\n  this.event = new Consul.Event(this);\n  this.health = new Consul.Health(this);\n  this.kv = new Consul.Kv(this);\n  this.query = new Consul.Query(this);\n  this.session = new Consul.Session(this);\n  this.status = new Consul.Status(this);\n\n  try {\n    if (opts.promisify) {\n      if (typeof opts.promisify === 'function') {\n        papi.tools.promisify(this, opts.promisify);\n      } else {\n        papi.tools.promisify(this);\n      }\n    }\n  } catch (err) {\n    err.message = 'promisify: ' + err.message;\n    throw err;\n  }\n}\n\nutil.inherits(Consul, papi.Client);\n\nConsul.Acl = Acl;\nConsul.Agent = Agent;\nConsul.Catalog = Catalog;\nConsul.Event = Event;\nConsul.Health = Health;\nConsul.Kv = Kv;\nConsul.Lock = Lock;\nConsul.Query = Query;\nConsul.Session = Session;\nConsul.Status = Status;\nConsul.Watch = Watch;\n\n/**\n * Object meta\n */\n\nConsul.meta = {};\n\n/**\n * Lock helper.\n */\n\nConsul.meta.lock = { type: 'eventemitter' };\n\nConsul.prototype.lock = function(opts) {\n  return new Consul.Lock(this, opts);\n};\n\n/**\n * Watch helper.\n */\n\nConsul.meta.watch = { type: 'eventemitter' };\n\nConsul.prototype.watch = function(opts) {\n  return new Consul.Watch(this, opts);\n};\n\n/**\n * Walk methods\n */\n\nConsul.meta.walk = { type: 'sync' };\n\nConsul.walk = Consul.prototype.walk = function() {\n  return papi.tools.walk(Consul);\n};\n\n/**\n * Parse query meta\n */\n\nConsul.meta.parseQueryMeta = { type: 'sync' };\n\nConsul.parseQueryMeta = Consul.prototype.parseQueryMeta = function(res) {\n  return utils.parseQueryMeta(res);\n};\n\n/**\n * Module exports.\n */\n\nexports.Consul = Consul;\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/acl.js":"/**\n * ACL manipulation\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar errors = require('./errors');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Acl` client.\n */\n\nfunction Acl(consul) {\n  this.consul = consul;\n}\n\n/**\n * Creates a new token with policy\n */\n\nAcl.prototype.create = function(opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'acl.create',\n    path: '/acl/create',\n    query: {},\n    type: 'json',\n    body: {},\n  };\n\n  if (opts.name) req.body.Name = opts.name;\n  if (opts.type) req.body.Type = opts.type;\n  if (opts.rules) req.body.Rules = opts.rules;\n\n  utils.options(req, opts);\n\n  this.consul._put(req, utils.body, callback);\n};\n\n/**\n * Update the policy of a token\n */\n\nAcl.prototype.update = function(opts, callback) {\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'acl.update',\n    path: '/acl/update',\n    query: {},\n    type: 'json',\n    body: {},\n  };\n\n  if (!opts.id) {\n    return callback(this.consul._err(errors.Validation('id required'), req));\n  }\n\n  req.body.ID = opts.id;\n\n  if (opts.name) req.body.Name = opts.name;\n  if (opts.type) req.body.Type = opts.type;\n  if (opts.rules) req.body.Rules = opts.rules;\n\n  utils.options(req, opts);\n\n  this.consul._put(req, utils.empty, callback);\n};\n\n/**\n * Destroys a given token\n */\n\nAcl.prototype.destroy = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { id: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'acl.destroy',\n    path: '/acl/destroy/{id}',\n    params: { id: opts.id },\n    query: {},\n  };\n\n  if (!opts.id) {\n    return callback(this.consul._err(errors.Validation('id required'), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._put(req, utils.empty, callback);\n};\n\n/**\n * Queries the policy of a given token\n */\n\nAcl.prototype.info = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { id: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'acl.info',\n    path: '/acl/info/{id}',\n    params: { id: opts.id },\n    query: {},\n  };\n\n  if (!opts.id) {\n    return callback(this.consul._err(errors.Validation('id required'), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.bodyItem, callback);\n};\n\nAcl.prototype.get = Acl.prototype.info;\n\n/**\n * Creates a new token by cloning an existing token\n */\n\nAcl.prototype.clone = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { id: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'acl.clone',\n    path: '/acl/clone/{id}',\n    params: { id: opts.id },\n    query: {},\n  };\n\n  if (!opts.id) {\n    return callback(this.consul._err(errors.Validation('id required'), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._put(req, utils.body, callback);\n};\n\n/**\n * Lists all the active tokens\n */\n\nAcl.prototype.list = function(opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'acl.list',\n    path: '/acl/list',\n    query: {},\n  };\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Module exports.\n */\n\nexports.Acl = Acl;\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/errors.js":"/**\n * Errors\n */\n\n'use strict';\n\n/**\n * Create\n */\n\nfunction create(message) {\n  var error = message instanceof Error ?\n    message :\n    new Error(message ? message : undefined);\n\n  error.isConsul = true;\n\n  return error;\n}\n\n/**\n * Validation\n */\n\nfunction validation(message) {\n  var error = create(message);\n\n  error.isValidation = true;\n\n  return error;\n}\n\n/**\n * Module exports.\n */\n\nexports.Consul = create;\nexports.Validation = validation;\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/utils.js":"/**\n * Helper functions\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar constants = require('./constants');\n\n/**\n * Body\n */\n\nfunction body(request, next) {\n  if (request.err) return next(false, request.err, undefined, request.res);\n\n  next(false, undefined, request.res.body, request.res);\n}\n\n/**\n * First item in body\n */\n\nfunction bodyItem(request, next) {\n  if (request.err) return next(false, request.err, undefined, request.res);\n\n  if (request.res.body && request.res.body.length) {\n    return next(false, undefined, request.res.body[0], request.res);\n  }\n\n  next(false, undefined, undefined, request.res);\n}\n\n/**\n * Empty\n */\n\nfunction empty(request, next) {\n  if (request.err) return next(false, request.err, undefined, request.res);\n\n  next(false, undefined, undefined, request.res);\n}\n\n/**\n * Normalize keys\n */\n\nfunction normalizeKeys(obj) {\n  var result = {};\n\n  if (obj) {\n    for (var name in obj) {\n      if (obj.hasOwnProperty(name)) {\n        result[name.replace(/_/g, '').toLowerCase()] = obj[name];\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * Defaults\n */\n\nfunction defaults(obj) {\n  if (!obj) obj = {};\n\n  var src;\n  for (var i = 0; i < arguments.length; i++) {\n    src = arguments[i];\n    for (var p in src) {\n      if (src.hasOwnProperty(p) && !obj.hasOwnProperty(p)) {\n        obj[p] = src[p];\n      }\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Common options\n */\n\nfunction options(req, opts) {\n  if (!opts) opts = {};\n\n  if (!req.query) req.query = {};\n\n  if (opts.dc) req.query.dc = opts.dc;\n  if (opts.wan) req.query.wan = '1';\n\n  if (opts.consistent) {\n    req.query.consistent = '1';\n  } else if (opts.stale) {\n    req.query.stale = '1';\n  }\n\n  if (opts.hasOwnProperty('index')) req.query.index = opts.index;\n  if (opts.hasOwnProperty('wait')) req.query.wait = opts.wait;\n  if (opts.hasOwnProperty('token')) req.query.token = opts.token;\n\n  // papi\n  if (opts.hasOwnProperty('ctx')) req.ctx = opts.ctx;\n  if (opts.hasOwnProperty('timeout')) req.timeout = opts.timeout;\n}\n\n/**\n * Decode value\n */\n\nfunction decode(value, opts) {\n  if (typeof value !== 'string') return value;\n  value = new Buffer(value, 'base64');\n  if (!opts || !opts.buffer) value = value.toString();\n  return value;\n}\n\n/**\n * Shallow clone\n */\n\nfunction clone(src) {\n  var dst = {};\n\n  for (var key in src) {\n    if (src.hasOwnProperty(key)) {\n      dst[key] = src[key];\n    }\n  }\n\n  return dst;\n}\n\n/**\n * Parse duration\n */\n\nfunction parseDuration(value) {\n  if (typeof value === 'number') return value / 1e6;\n  if (typeof value !== 'string') return;\n\n  var n;\n  var m = value.match(/^(\\d*\\.?\\d*)$/);\n\n  if (m) {\n    n = parseFloat(m[1]);\n\n    if (!isNaN(n)) return n / 1e6;\n  }\n\n  m = value.match(/^([\\d\\.]*)(ns|us|ms|s|m|h)$/);\n\n  if (!m) return;\n\n  n = parseFloat(m[1]);\n\n  if (isNaN(n)) return;\n\n  return n * constants.DURATION_UNITS[m[2]] / 1e6;\n}\n\n/**\n * Set timeout with cancel support\n */\n\nfunction setTimeoutContext(fn, ctx, timeout) {\n  var id;\n\n  var cancel = function() {\n    clearTimeout(id);\n  };\n\n  id = setTimeout(function() {\n    ctx.removeListener('cancel', cancel);\n\n    fn();\n  }, timeout);\n\n  ctx.once('cancel', cancel);\n}\n\n/**\n * Set interval with cancel support\n */\n\nfunction setIntervalContext(fn, ctx, timeout) {\n  var id;\n\n  var cancel = function() {\n    clearInterval(id);\n  };\n\n  id = setInterval(function() { fn(); }, timeout);\n\n  ctx.once('cancel', cancel);\n}\n\n/**\n * Create node/server-level check object\n * Corresponds to CheckType in Consul Agent Endpoint:\n * https://github.com/hashicorp/consul/blob/master/command/agent/check.go#L43\n * Corresponds to AgentServiceCheck in Consul Go API (which currently omits Notes):\n * https://github.com/hashicorp/consul/blob/master/api/agent.go#L66\n * Currently omits ID and Name fields:\n * https://github.com/hashicorp/consul/issues/2223\n */\n\nfunction _createServiceCheck(src) {\n  var dst = {};\n\n  if ((src.http || src.script || src.tcp) && src.interval) {\n    if (src.http) {\n      dst.HTTP = src.http;\n      if (src.hasOwnProperty('tlsskipverify')) dst.TLSSkipVerify = src.tlsskipverify;\n    } else if (src.tcp){\n      dst.TCP = src.tcp;\n    } else {\n      dst.Script = src.script;\n      if (src.hasOwnProperty('dockercontainerid')) dst.DockerContainerID = src.dockercontainerid;\n      if (src.hasOwnProperty('shell')) dst.Shell = src.shell;\n    }\n    dst.Interval = src.interval;\n    if (src.hasOwnProperty('timeout')) dst.Timeout = src.timeout;\n  } else if (src.ttl) {\n    dst.TTL = src.ttl;\n  } else {\n    throw new Error('http/tcp/script and interval, or ttl required');\n  }\n  if (src.hasOwnProperty('notes')) dst.Notes = src.notes;\n  if (src.hasOwnProperty('status')) dst.Status = src.status;\n  if (src.hasOwnProperty('deregistercriticalserviceafter')) {\n    dst.DeregisterCriticalServiceAfter = src.deregistercriticalserviceafter;\n  }\n\n  return dst;\n}\n\nfunction createServiceCheck(src) {\n  return _createServiceCheck(normalizeKeys(src));\n}\n\n/**\n * Create standalone check object\n * Corresponds to CheckDefinition in Consul Agent Endpoint:\n * https://github.com/hashicorp/consul/blob/master/command/agent/structs.go#L47\n * Corresponds to AgentCheckRegistration in Consul Go API:\n * https://github.com/hashicorp/consul/blob/master/api/agent.go#L57\n */\n\nfunction createCheck(src) {\n  src = normalizeKeys(src);\n\n  var dst = _createServiceCheck(src);\n\n  if (src.name) {\n    dst.Name = src.name;\n  } else {\n    throw new Error('name required');\n  }\n\n  if (src.hasOwnProperty('id')) dst.ID = src.id;\n  if (src.hasOwnProperty('serviceid')) dst.ServiceID = src.serviceid;\n\n  return dst;\n}\n\n/**\n * Has the Consul index changed.\n */\n\nfunction hasIndexChanged(index, prevIndex) {\n  if (typeof index !== 'string' || !index) return false;\n  if (typeof prevIndex !== 'string' || !prevIndex) return true;\n  return index !== prevIndex;\n}\n\n/**\n * Parse query meta\n */\n\nfunction parseQueryMeta(res) {\n  var meta = {};\n\n  if (res && res.headers) {\n    if (res.headers['x-consul-index']) {\n      meta.LastIndex = res.headers['x-consul-index'];\n    }\n    if (res.headers['x-consul-lastcontact']) {\n      meta.LastContact = parseInt(res.headers['x-consul-lastcontact'], 10);\n    }\n    if (res.headers['x-consul-knownleader']) {\n      meta.KnownLeader = res.headers['x-consul-knownleader'] === 'true';\n    }\n    if (res.headers['x-consul-translate-addresses']) {\n      meta.AddressTranslationEnabled = res.headers['x-consul-translate-addresses'] === 'true';\n    }\n  }\n\n  return meta;\n}\n\n/**\n * Module exports\n */\n\nexports.body = body;\nexports.bodyItem = bodyItem;\nexports.decode = decode;\nexports.empty = empty;\nexports.normalizeKeys = normalizeKeys;\nexports.defaults = defaults;\nexports.options = options;\nexports.clone = clone;\nexports.parseDuration = parseDuration;\nexports.setTimeoutContext = setTimeoutContext;\nexports.setIntervalContext = setIntervalContext;\nexports.createServiceCheck = createServiceCheck;\nexports.createCheck = createCheck;\nexports.hasIndexChanged = hasIndexChanged;\nexports.parseQueryMeta = parseQueryMeta;\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/constants.js":"/**\n * Constants\n */\n\n'use strict';\n\n/**\n * Default options\n */\n\nexports.DEFAULT_OPTIONS = [\n  'consistent',\n  'dc',\n  'stale',\n  'timeout',\n  'token',\n  'wait',\n  'wan',\n];\n\n/**\n * Values\n */\n\nexports.AGENT_STATUS = [\n  'none',\n  'alive',\n  'leaving',\n  'left',\n  'failed',\n];\n\nexports.CHECK_STATE = [\n  'unknown',\n  'passing',\n  'warning',\n  'critical',\n];\n\n/**\n * Time\n */\n\nvar du = exports.DURATION_UNITS = { ns: 1 };\ndu.us = 1000 * du.ns;\ndu.ms = 1000 * du.us;\ndu.s = 1000 * du.ms;\ndu.m = 60 * du.s;\ndu.h = 60 * du.m;\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/agent.js":"/**\n * Agent control\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar AgentCheck = require('./agent/check').AgentCheck;\nvar AgentService = require('./agent/service').AgentService;\nvar errors = require('./errors');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Agent` client.\n */\n\nfunction Agent(consul) {\n  this.consul = consul;\n  this.check = new Agent.Check(consul);\n  this.service = new Agent.Service(consul);\n}\n\nAgent.Check = AgentCheck;\nAgent.Service = AgentService;\n\n/**\n * Returns the checks the local agent is managing\n */\n\nAgent.prototype.checks = function() {\n  this.check.list.apply(this.check, arguments);\n};\n\n/**\n * Returns the services local agent is managing\n */\n\nAgent.prototype.services = function() {\n  this.service.list.apply(this.service, arguments);\n};\n\n/**\n * Returns the members as seen by the local consul agent\n */\n\nAgent.prototype.members = function(opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'agent.members',\n    path: '/agent/members',\n    query: {},\n  };\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Returns the local node configuration\n */\n\nAgent.prototype.self = function(opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'agent.self',\n    path: '/agent/self',\n  };\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Manages node maintenance mode\n */\n\nAgent.prototype.maintenance = function(opts, callback) {\n  if (typeof opts === 'boolean') {\n    opts = { enable: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'agent.maintenance',\n    path: '/agent/maintenance',\n    query: { enable: opts.enable },\n  };\n\n  if (typeof opts.enable !== 'boolean') {\n    return callback(this.consul._err(errors.Validation('enable required'), req));\n  }\n  if (opts.reason) req.query.reason = opts.reason;\n\n  utils.options(req, opts);\n\n  this.consul._put(req, utils.empty, callback);\n};\n\n/**\n * Trigger local agent to join a node\n */\n\nAgent.prototype.join = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { address: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'agent.join',\n    path: '/agent/join/{address}',\n    params: { address: opts.address },\n  };\n\n  if (!opts.address) {\n    return callback(this.consul._err(errors.Validation('address required'), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.empty, callback);\n};\n\n/**\n * Force remove node\n */\n\nAgent.prototype.forceLeave = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { node: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'agent.forceLeave',\n    path: '/agent/force-leave/{node}',\n    params: { node: opts.node },\n  };\n\n  if (!opts.node) {\n    return callback(this.consul._err(errors.Validation('node required'), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.empty, callback);\n};\n\n/**\n * Module exports.\n */\n\nexports.Agent = Agent;\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/agent/check.js":"/**\n * Agent check\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar errors = require('../errors');\nvar utils = require('../utils');\n\n/**\n * Initialize a new `AgentCheck` client.\n */\n\nfunction AgentCheck(consul) {\n  this.consul = consul;\n}\n\n/**\n * Returns the checks the local agent is managing\n */\n\nAgentCheck.prototype.list = function(opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'agent.check.list',\n    path: '/agent/checks',\n  };\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Registers a new local check\n */\n\nAgentCheck.prototype.register = function(opts, callback) {\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'agent.check.register',\n    path: '/agent/check/register',\n    type: 'json',\n  };\n\n  try {\n    req.body = utils.createCheck(opts);\n  } catch (err) {\n    return callback(this.consul._err(errors.Validation(err.message), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._put(req, utils.empty, callback);\n};\n\n/**\n * Deregister a local check\n */\n\nAgentCheck.prototype.deregister = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { id: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'agent.check.deregister',\n    path: '/agent/check/deregister/{id}',\n    params: { id: opts.id },\n  };\n\n  if (!opts.id) {\n    return callback(this.consul._err(errors.Validation('id required'), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.empty, callback);\n};\n\n/**\n * Mark a local test as passing\n */\n\nAgentCheck.prototype.pass = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { id: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'agent.check.pass',\n    path: '/agent/check/pass/{id}',\n    params: { id: opts.id },\n    query: {},\n  };\n\n  if (!opts.id) {\n    return callback(this.consul._err(errors.Validation('id required'), req));\n  }\n\n  if (opts.note) req.query.note = opts.note;\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.empty, callback);\n};\n\n/**\n * Mark a local test as warning\n */\n\nAgentCheck.prototype.warn = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { id: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'agent.check.warn',\n    path: '/agent/check/warn/{id}',\n    params: { id: opts.id },\n    query: {},\n  };\n\n  if (!opts.id) {\n    return callback(this.consul._err(errors.Validation('id required'), req));\n  }\n\n  if (opts.note) req.query.note = opts.note;\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.empty, callback);\n};\n\n/**\n * Mark a local test as critical\n */\n\nAgentCheck.prototype.fail = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { id: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'agent.check.fail',\n    path: '/agent/check/fail/{id}',\n    params: { id: opts.id },\n    query: {},\n  };\n\n  if (!opts.id) {\n    return callback(this.consul._err(errors.Validation('id required'), req));\n  }\n\n  if (opts.note) req.query.note = opts.note;\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.empty, callback);\n};\n\n/**\n * Module Exports.\n */\n\nexports.AgentCheck = AgentCheck;\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/agent/service.js":"/**\n * Agent service\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar errors = require('../errors');\nvar utils = require('../utils');\n\n/**\n * Initialize a new `AgentService` client.\n */\n\nfunction AgentService(consul) {\n  this.consul = consul;\n}\n\n/**\n * Returns the services local agent is managing\n */\n\nAgentService.prototype.list = function(opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'agent.service.list',\n    path: '/agent/services',\n  };\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Registers a new local service\n */\n\nAgentService.prototype.register = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'agent.service.register',\n    path: '/agent/service/register',\n    type: 'json',\n    body: {},\n  };\n\n  if (!opts.name) {\n    return callback(this.consul._err(errors.Validation('name required'), req));\n  }\n\n  req.body.Name = opts.name;\n  if (opts.id) req.body.ID = opts.id;\n  if (opts.tags) req.body.Tags = opts.tags;\n  if (opts.hasOwnProperty('address')) req.body.Address = opts.address;\n  if (opts.hasOwnProperty('port')) req.body.Port = opts.port;\n\n  try {\n    if (Array.isArray(opts.checks)) {\n      req.body.Checks = opts.checks.map(utils.createServiceCheck);\n    } else if (opts.check) {\n      req.body.Check = utils.createServiceCheck(opts.check);\n    }\n  } catch (err) {\n    return callback(this.consul._err(errors.Validation(err.message), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._put(req, utils.empty, callback);\n};\n\n/**\n * Deregister a local service\n */\n\nAgentService.prototype.deregister = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { id: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'agent.service.deregister',\n    path: '/agent/service/deregister/{id}',\n    params: { id: opts.id },\n  };\n\n  if (!opts.id) {\n    return callback(this.consul._err(errors.Validation('id required'), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.empty, callback);\n};\n\n/**\n * Manages node maintenance mode\n */\n\nAgentService.prototype.maintenance = function(opts, callback) {\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'agent.service.maintenance',\n    path: '/agent/service/maintenance/{id}',\n    params: { id: opts.id },\n    query: { enable: opts.enable },\n  };\n\n  if (!opts.id) {\n    return callback(this.consul._err(errors.Validation('id required'), req));\n  }\n  if (typeof opts.enable !== 'boolean') {\n    return callback(this.consul._err(errors.Validation('enable required'), req));\n  }\n  if (opts.reason) req.query.reason = opts.reason;\n\n  utils.options(req, opts);\n\n  this.consul._put(req, utils.empty, callback);\n};\n\n/**\n * Module Exports.\n */\n\nexports.AgentService = AgentService;\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/catalog.js":"/**\n * Manage catalog\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar CatalogNode = require('./catalog/node').CatalogNode;\nvar CatalogService = require('./catalog/service').CatalogService;\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Catalog` client.\n */\n\nfunction Catalog(consul) {\n  this.consul = consul;\n  this.node = new Catalog.Node(consul);\n  this.service = new Catalog.Service(consul);\n}\n\nCatalog.Node = CatalogNode;\nCatalog.Service = CatalogService;\n\n/**\n * Lists known datacenters\n */\n\nCatalog.prototype.datacenters = function(opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'catalog.datacenters',\n    path: '/catalog/datacenters',\n  };\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Lists nodes in a given DC\n */\n\nCatalog.prototype.nodes = function() {\n  this.node.list.apply(this.node, arguments);\n};\n\n/**\n * Lists services in a given DC\n */\n\nCatalog.prototype.services = function() {\n  this.service.list.apply(this.service, arguments);\n};\n\n/**\n * Module exports.\n */\n\nexports.Catalog = Catalog;\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/catalog/node.js":"/**\n * Catalog node\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar errors = require('../errors');\nvar utils = require('../utils');\n\n/**\n * Initialize a new `CatalogNode` client.\n */\n\nfunction CatalogNode(consul) {\n  this.consul = consul;\n}\n\n/**\n * Lists nodes in a given DC\n */\n\nCatalogNode.prototype.list = function(opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = {};\n  } else if (typeof opts === 'string') {\n    opts = { dc: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'catalog.node.list',\n    path: '/catalog/nodes',\n  };\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Lists the services provided by a node\n */\n\nCatalogNode.prototype.services = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { node: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'catalog.node.services',\n    path: '/catalog/node/{node}',\n    params: { node: opts.node },\n  };\n\n  if (!opts.node) {\n    return callback(this.consul._err(errors.Validation('node required'), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Module Exports.\n */\n\nexports.CatalogNode = CatalogNode;\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/catalog/service.js":"/**\n * Catalog service\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar errors = require('../errors');\nvar utils = require('../utils');\n\n/**\n * Initialize a new `CatalogService` client.\n */\n\nfunction CatalogService(consul) {\n  this.consul = consul;\n}\n\n/**\n * Lists services in a given DC\n */\n\nCatalogService.prototype.list = function(opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = {};\n  } else if (typeof opts === 'string') {\n    opts = { dc: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'catalog.service.list',\n    path: '/catalog/services',\n    query: {},\n  };\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Lists the nodes in a given service\n */\n\nCatalogService.prototype.nodes = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { service: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'catalog.service.nodes',\n    path: '/catalog/service/{service}',\n    params: { service: opts.service },\n    query: {},\n  };\n\n  if (!opts.service) {\n    return callback(this.consul._err(errors.Validation('service required'), req));\n  }\n  if (opts.tag) req.query.tag = opts.tag;\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Module Exports.\n */\n\nexports.CatalogService = CatalogService;\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/event.js":"/**\n * Events\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar errors = require('./errors');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Event` client.\n */\n\nfunction Event(consul) {\n  this.consul = consul;\n}\n\n/**\n * Fires a new user event\n */\n\nEvent.prototype.fire = function(opts, callback) {\n  if (arguments.length === 3) {\n    opts = {\n      name: arguments[0],\n      payload: arguments[1],\n    };\n    callback = arguments[2];\n  } else if (typeof opts === 'string') {\n    opts = { name: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'event.fire',\n    path: '/event/fire/{name}',\n    params: { name: opts.name },\n    query: {},\n  };\n\n  if (!opts.name) {\n    return callback(this.consul._err(errors.Validation('name required'), req));\n  }\n\n  var buffer;\n\n  if (opts.hasOwnProperty('payload')) {\n    buffer = Buffer.isBuffer(opts.payload);\n    req.body = buffer ? opts.payload : new Buffer(opts.payload);\n  }\n  if (opts.node) req.query.node = opts.node;\n  if (opts.service) req.query.service = opts.service;\n  if (opts.tag) req.query.tag = opts.tag;\n\n  utils.options(req, opts);\n\n  this.consul._put(req, utils.body, function(err, data, res) {\n    if (err) return callback(err, undefined, res);\n\n    if (data.hasOwnProperty('Payload')) {\n      data.Payload = utils.decode(data.Payload, { buffer: buffer });\n    }\n\n    callback(null, data, res);\n  });\n};\n\n/**\n * Lists the most recent events an agent has seen\n */\n\nEvent.prototype.list = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else if (!callback) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'event.list',\n    path: '/event/list',\n    query: {},\n  };\n\n  if (opts.name) req.query.name = opts.name;\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, function(err, data, res) {\n    if (err) return callback(err, undefined, res);\n\n    data.forEach(function(item) {\n      if (!item.hasOwnProperty('Payload')) return;\n      item.Payload = utils.decode(item.Payload, opts);\n    });\n\n    callback(null, data, res);\n  });\n};\n\n/**\n * Module exports.\n */\n\nexports.Event = Event;\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/health.js":"/**\n * Health information\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar constants = require('./constants');\nvar errors = require('./errors');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Health` client.\n */\n\nfunction Health(consul) {\n  this.consul = consul;\n}\n\n/**\n * Returns the health info of a node\n */\n\nHealth.prototype.node = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { node: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'health.node',\n    path: '/health/node/{node}',\n    params: { node: opts.node },\n  };\n\n  if (!opts.node) {\n    return callback(this.consul._err(errors.Validation('node required'), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Returns the checks of a service\n */\n\nHealth.prototype.checks = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { service: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'health.checks',\n    path: '/health/checks/{service}',\n    params: { service: opts.service },\n  };\n\n  if (!opts.service) {\n    return callback(this.consul._err(errors.Validation('service required'), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Returns the nodes and health info of a service\n */\n\nHealth.prototype.service = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { service: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'health.service',\n    path: '/health/service/{service}',\n    params: { service: opts.service },\n    query: {},\n  };\n\n  if (!opts.service) {\n    return callback(this.consul._err(errors.Validation('service required'), req));\n  }\n\n  if (opts.tag) req.query.tag = opts.tag;\n  if (opts.passing) req.query.passing = 'true';\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Returns the checks in a given state\n */\n\nHealth.prototype.state = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { state: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'health.state',\n    path: '/health/state/{state}',\n    params: { state: opts.state },\n  };\n\n  if (!opts.state) {\n    return callback(this.consul._err(errors.Validation('state required'), req));\n  }\n\n  if (opts.state !== 'any' && constants.CHECK_STATE.indexOf(opts.state) < 0) {\n    return callback(this.consul._err(errors.Validation('state invalid: ' + opts.state), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Module exports.\n */\n\nexports.Health = Health;\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/kv.js":"/**\n * Key/Value store\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar errors = require('./errors');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Session` client.\n */\n\nfunction Kv(consul) {\n  this.consul = consul;\n}\n\n/**\n * Object meta\n */\n\nKv.meta = {};\n\n/**\n * Get\n */\n\nKv.prototype.get = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { key: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'kv.get',\n    path: '/kv/{key}',\n    params: { key: (opts.key || '') },\n    query: {},\n  };\n\n  if (opts.recurse) req.query.recurse = 'true';\n  if (opts.raw) {\n    req.query.raw = 'true';\n    req.buffer = true;\n  }\n\n  utils.options(req, opts);\n\n  this.consul._get(req, function(err, res) {\n    if (res && res.statusCode === 404) return callback(undefined, undefined, res);\n    if (err) return callback(err, undefined, res);\n    if (opts.raw) return callback(null, res.body, res);\n\n    if (res.body && Array.isArray(res.body) && res.body.length) {\n      res.body.forEach(function(item) {\n        if (!item.hasOwnProperty('Value')) return;\n        item.Value = utils.decode(item.Value, opts);\n      });\n    } else {\n      return callback(undefined, undefined, res);\n    }\n\n    if (!opts.recurse) return callback(null, res.body[0], res);\n\n    callback(null, res.body, res);\n  });\n};\n\n/**\n * Keys\n */\n\nKv.prototype.keys = function(opts, callback) {\n  switch (typeof opts) {\n    case 'string':\n      opts = { key: opts };\n      break;\n    case 'function':\n      callback = opts;\n      opts = {};\n      break;\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'kv.keys',\n    path: '/kv/{key}',\n    params: { key: (opts.key || '') },\n    query: { keys: true },\n  };\n\n  if (opts.separator) req.query.separator = opts.separator;\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Set\n */\n\nKv.prototype.set = function(opts, callback) {\n  switch (arguments.length) {\n    case 4:\n      // set(key, value, opts, callback)\n      opts = arguments[2];\n      opts.key = arguments[0];\n      opts.value = arguments[1];\n      callback = arguments[3];\n      break;\n    case 3:\n      // set(key, value, callback)\n      opts = {\n        key: arguments[0],\n        value: arguments[1],\n      };\n      callback = arguments[2];\n      break;\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'kv.set',\n    path: '/kv/{key}',\n    params: { key: opts.key },\n    query: {},\n    type: 'text',\n    body: opts.value || '',\n  };\n\n  if (!opts.key) {\n    return callback(this.consul._err(errors.Validation('key required'), req));\n  }\n  if (!opts.hasOwnProperty('value')) {\n    return callback(this.consul._err(errors.Validation('value required'), req));\n  }\n\n  if (opts.hasOwnProperty('cas')) req.query.cas = opts.cas;\n  if (opts.hasOwnProperty('flags')) req.query.flags = opts.flags;\n  if (opts.hasOwnProperty('acquire')) req.query.acquire = opts.acquire;\n  if (opts.hasOwnProperty('release')) req.query.release = opts.release;\n\n  utils.options(req, opts);\n\n  this.consul._put(req, utils.body, callback);\n};\n\n/**\n * Delete\n */\n\nKv.prototype.del = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { key: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'kv.del',\n    path: '/kv/{key}',\n    params: { key: (opts.key || '') },\n    query: {},\n  };\n\n  if (opts.recurse) req.query.recurse = 'true';\n\n  if (opts.hasOwnProperty('cas')) req.query.cas = opts.cas;\n\n  utils.options(req, opts);\n\n  this.consul._delete(req, utils.empty, callback);\n};\n\nKv.meta.delete = { type: 'alias' };\n\nKv.prototype.delete = Kv.prototype.del;\n\n/**\n * Module exports.\n */\n\nexports.Kv = Kv;\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/lock.js":"/**\n * Lock.\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar events = require('events');\nvar util = require('util');\n\nvar errors = require('./errors');\nvar utils = require('./utils');\n\n/**\n * Constants\n */\n\nvar DEFAULT_LOCK_SESSION_NAME = 'Consul API Lock';\nvar DEFAULT_LOCK_SESSION_TTL = '15s';\nvar DEFAULT_LOCK_WAIT_TIME = '15s';\nvar DEFAULT_LOCK_RETRY_TIME = '5s';\n\n// magic flag 0x2ddccbc058a50c18\nvar LOCK_FLAG_VALUE = '3304740253564472344';\n\n/**\n * Initialize a new `Lock` instance.\n */\n\nfunction Lock(consul, opts) {\n  events.EventEmitter.call(this);\n\n  opts = utils.normalizeKeys(opts);\n\n  this.consul = consul;\n  this._opts = opts;\n\n  if (opts.session) {\n    switch (typeof opts.session) {\n      case 'string':\n        opts.session = { id: opts.session };\n        break;\n      case 'object':\n        opts.session = utils.normalizeKeys(opts.session);\n        break;\n      default:\n        throw errors.Validation('session must be an object or string');\n    }\n  } else {\n    opts.session = {};\n  }\n\n  if (!opts.key) {\n    throw errors.Validation('key required');\n  } else if (typeof opts.key !== 'string') {\n    throw errors.Validation('key must be a string');\n  }\n}\n\nutil.inherits(Lock, events.EventEmitter);\n\n/**\n * Object meta\n */\n\nLock.meta = {};\n\n/**\n * Acquire lock\n */\n\nLock.meta.acquire = { type: 'sync' };\n\nLock.prototype.acquire = function() {\n  var self = this;\n\n  if (self._ctx) throw new errors.Validation('lock in use');\n\n  var ctx = self._ctx = new events.EventEmitter();\n\n  ctx.key = self._opts.key;\n  ctx.session = utils.clone(self._opts.session);\n  ctx.index = '0';\n  ctx.end = false;\n  ctx.lockWaitTime = self._opts.lockwaittime || DEFAULT_LOCK_WAIT_TIME;\n  ctx.lockWaitTimeout = utils.parseDuration(ctx.lockWaitTime) + 1000;\n  ctx.lockRetryTime = utils.parseDuration(self._opts.lockretrytime || DEFAULT_LOCK_RETRY_TIME);\n  ctx.state = 'session';\n  ctx.value = self._opts.value || null;\n\n  process.nextTick(function() {\n    self._run(ctx);\n  });\n};\n\n/**\n * Release lock\n */\n\nLock.meta.release = { type: 'sync' };\n\nLock.prototype.release = function() {\n  var self = this;\n\n  var ctx = self._ctx;\n\n  if (!self._ctx) throw errors.Validation('no lock in use');\n\n  delete self._ctx;\n\n  process.nextTick(function() {\n    self._release(ctx);\n  });\n};\n\n/**\n * Error helper\n */\n\nLock.prototype._err = function(err, res) {\n  var self = this;\n\n  self.emit('error', err, res);\n};\n\n/**\n * Lock\n */\n\nLock.prototype._run = function(ctx) {\n  if (ctx.end) return;\n\n  switch (ctx.state) {\n    case 'session':\n      return this._session(ctx);\n    case 'wait':\n      return this._wait(ctx);\n    case 'acquire':\n      return this._acquire(ctx);\n    case 'monitor':\n      return this._monitor(ctx);\n    default:\n      throw new Error('invalid state: ' + ctx.state);\n  }\n};\n\n/**\n * Create lock session\n */\n\nLock.prototype._session = function(ctx) {\n  var self = this;\n\n  if (!ctx.session.id) {\n    var opts = utils.defaults({\n      name: ctx.session.name || DEFAULT_LOCK_SESSION_NAME,\n      ttl: ctx.session.ttl || DEFAULT_LOCK_SESSION_TTL,\n      ctx: ctx,\n    }, ctx.session, self.consul._defaults);\n\n    self.consul.session.create(opts, function(err, data, res) {\n      if (err) {\n        err.message = 'session create: ' + err.message;\n        return self._end(ctx, err, res);\n      }\n\n      ctx.session = {\n        id: data.ID,\n        ttl: opts.ttl,\n      };\n\n      ctx.state = 'wait';\n\n      var renewTimeout = utils.parseDuration(ctx.session.ttl) / 2;\n\n      // renew session\n      ctx.renewSession = setInterval(function() {\n        var opts = utils.defaults({\n          id: ctx.session.id,\n          timeout: renewTimeout,\n          ctx: ctx,\n        }, self.consul._defaults);\n\n        self.consul.session.renew(opts, function(err, data, res) {\n          if (err) self._end(ctx, err, res);\n        });\n      }, renewTimeout);\n\n      return self._run(ctx);\n    });\n\n    return;\n  }\n\n  ctx.state = 'wait';\n\n  process.nextTick(function() {\n    self._run(ctx);\n  });\n};\n\n/**\n * Wait for non-locked resource\n */\n\nLock.prototype._wait = function(ctx) {\n  var self = this;\n\n  var retry = function() {\n    utils.setTimeoutContext(function() {\n      self._run(ctx);\n    }, ctx, ctx.lockRetryTime);\n  };\n\n  var opts = utils.defaults({\n    key: ctx.key,\n    wait: ctx.lockWaitTime,\n    timeout: ctx.lockWaitTimeout,\n    ctx: ctx,\n    index: ctx.index,\n  }, self.consul._defaults);\n\n  self.consul.kv.get(opts, function(err, data, res) {\n    if (err) return self._end(ctx, err, res);\n\n    if (data) {\n      // we try to use the same magic number as consul/api in an attempt to be\n      // compatible\n      if (data.Flags !== +LOCK_FLAG_VALUE) {\n        err = errors.Validation('consul: lock: existing key does not match lock use');\n        return self._end(ctx, err, res);\n      }\n\n      var newIndex = res.headers['x-consul-index'];\n      if (utils.hasIndexChanged(newIndex, ctx.index)) ctx.index = newIndex;\n\n      if (data.Session !== ctx.Session) {\n        self.emit('retry', { leader: data.Session });\n        return retry();\n      }\n    } else if (res.statusCode !== 404) {\n      return self._end(ctx, new Error('consul: lock: error getting key'), res);\n    }\n\n    ctx.state = 'acquire';\n\n    self._run(ctx);\n  });\n};\n\n/**\n * Attempt to acquire lock\n */\n\nLock.prototype._acquire = function(ctx) {\n  var self = this;\n\n  var opts = utils.defaults({\n    key: ctx.key,\n    acquire: ctx.session.id,\n    ctx: ctx,\n    value: ctx.value,\n    flags: LOCK_FLAG_VALUE,\n  }, self.consul._defaults);\n\n  self.consul.kv.set(opts, function(err, data, res) {\n    if (err) return self._end(ctx, err, res);\n\n    if (data !== true) {\n      ctx.state = 'wait';\n\n      return utils.setTimeoutContext(function() { self._run(ctx); }, ctx,\n        ctx.lockRetryTime);\n    }\n\n    ctx.held = true;\n    self.emit('acquire');\n\n    ctx.state = 'monitor';\n\n    self._run(ctx);\n  });\n};\n\n/**\n * Monitor lock\n */\n\nLock.prototype._monitor = function(ctx) {\n  var self = this;\n\n  var monitor = ctx.monitor = self.consul.watch({\n    method: self.consul.kv.get,\n    options: utils.defaults({\n      key: ctx.key,\n      wait: ctx.lockWaitTime,\n      timeout: ctx.lockWaitTimeout,\n      index: ctx.index,\n    }, self.consul._defaults),\n  });\n\n  var ttl = ctx.session.ttl && utils.parseDuration(ctx.session.ttl);\n\n  // monitor updates\n  if (ttl) {\n    utils.setIntervalContext(function() {\n      var time = monitor.updateTime();\n\n      if (time && new Date() - time > ttl + 1000) {\n        monitor.end();\n      }\n    }, ctx, Math.min(1000, ttl));\n  }\n\n  monitor.on('change', function(data) {\n    if (data) {\n      if (data.Session !== ctx.session.id) {\n        return monitor.end();\n      }\n    }\n  });\n\n  monitor.on('error', function() {\n    // ignore errors\n  });\n\n  monitor.on('end', function() {\n    self._end(ctx);\n  });\n};\n\n/**\n * Close context processes\n */\n\nLock.prototype._end = function(ctx, err, res) {\n  var self = this;\n\n  if (ctx.end) return;\n  ctx.end = true;\n\n  delete self._ctx;\n\n  if (err) self._err(err, res);\n\n  if (ctx.monitor) {\n    ctx.monitor.removeAllListeners();\n    ctx.monitor.end();\n\n    delete ctx.monitor;\n  }\n\n  if (ctx.renewSession) {\n    clearInterval(ctx.renewSession);\n\n    var opts = utils.defaults({\n      id: ctx.session.id,\n      timeout: 1000,\n    }, self.consul._defaults);\n\n    self.consul.session.destroy(opts, function() {\n      // ignore errors\n    });\n\n    delete ctx.renewSession;\n  }\n\n  // abort any pending requests\n  ctx.emit('cancel');\n\n  if (ctx.held) {\n    ctx.held = false;\n    self.emit('release');\n  }\n\n  self.emit('end');\n};\n\n/**\n * Release lock\n */\n\nLock.prototype._release = function(ctx) {\n  var self = this;\n\n  if (ctx.held) {\n    var opts = utils.defaults({\n      key: ctx.key,\n      release: ctx.session.id,\n      ctx: ctx,\n      value: ctx.value,\n      flags: LOCK_FLAG_VALUE,\n    }, self.consul._defaults);\n\n    self.consul.kv.set(opts, function(err, data) {\n      if (err) return self._end(ctx, err);\n\n      if (data !== true) {\n        err = new Error('failed to release lock');\n        return self._end(ctx, err);\n      }\n\n      self._end(ctx);\n    });\n\n    return;\n  }\n\n  process.nextTick(function() {\n    self._end(ctx);\n  });\n};\n\n/**\n * Module exports.\n */\n\nexports.Lock = Lock;\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/query.js":"/**\n * Query manipulation\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar errors = require('./errors');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Query` client.\n */\n\nfunction Query(consul) {\n  this.consul = consul;\n}\n\n/**\n * Lists all queries\n */\n\nQuery.prototype.list = function(opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'query.list',\n    path: '/query',\n  };\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Create a new query\n */\n\nQuery.prototype.create = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { service: { service: opts } };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'query.create',\n    path: '/query',\n    query: {},\n    type: 'json',\n  };\n\n  try {\n    this._params(req, opts);\n    if (!req.body.Service || !req.body.Service.Service) {\n      throw errors.Validation('service required');\n    }\n  } catch (err) {\n    return callback(this.consul._err(err, req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._post(req, utils.body, callback);\n};\n\n/**\n * Gets a given query\n */\n\nQuery.prototype.get = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { query: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'query.get',\n    path: '/query/{query}',\n    params: { query: opts.query },\n    query: {},\n  };\n\n  if (!opts.query) {\n    return callback(this.consul._err(errors.Validation('query required'), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.bodyItem, callback);\n};\n\n/**\n * Update existing query\n */\n\nQuery.prototype.update = function(opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'query.update',\n    path: '/query/{query}',\n    params: { query: opts.query },\n    query: {},\n    type: 'json',\n  };\n\n  try {\n    if (!opts.query) throw errors.Validation('query required');\n    this._params(req, opts);\n    if (!req.body.Service || !req.body.Service.Service) {\n      throw errors.Validation('service required');\n    }\n  } catch (err) {\n    return callback(this.consul._err(err, req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._put(req, utils.empty, callback);\n};\n\n/**\n * Destroys a given query\n */\n\nQuery.prototype.destroy = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { query: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'query.destroy',\n    path: '/query/{query}',\n    params: { query: opts.query },\n    query: {},\n  };\n\n  if (!opts.query) {\n    return callback(this.consul._err(errors.Validation('query required'), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._delete(req, utils.empty, callback);\n};\n\n/**\n * Executes a given query\n */\n\nQuery.prototype.execute = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { query: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'query.execute',\n    path: '/query/{query}/execute',\n    params: { query: opts.query },\n    query: {},\n  };\n\n  if (!opts.query) {\n    return callback(this.consul._err(errors.Validation('query required'), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Explain a given query\n */\n\nQuery.prototype.explain = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { query: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'query.explain',\n    path: '/query/{query}/explain',\n    params: { query: opts.query },\n    query: {},\n  };\n\n  if (!opts.query) {\n    return callback(this.consul._err(errors.Validation('query required'), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.bodyItem, callback);\n};\n\n/**\n * Generate body for query create and update\n */\n\nQuery.prototype._params = function(req, opts) {\n  var body = req.body || {};\n\n  if (opts.name) body.Name = opts.name;\n  if (opts.session) body.Session = opts.session;\n  if (opts.token) {\n    body.Token = opts.token;\n    delete opts.token;\n  }\n  if (opts.near) body.Near = opts.near;\n  if (opts.template) {\n    var template = utils.normalizeKeys(opts.template);\n    if (template.type || template.regexp) {\n      body.Template = {};\n      if (template.type) body.Template.Type = template.type;\n      if (template.regexp) body.Template.Regexp = template.regexp;\n    }\n  }\n  if (opts.service) {\n    var service = utils.normalizeKeys(opts.service);\n    body.Service = {};\n    if (service.service) body.Service.Service = service.service;\n    if (service.failover) {\n      var failover = utils.normalizeKeys(service.failover);\n      if (typeof failover.nearestn === 'number' || failover.datacenters) {\n        body.Service.Failover = {};\n        if (typeof failover.nearestn === 'number') {\n          body.Service.Failover.NearestN = failover.nearestn;\n        }\n        if (failover.datacenters) {\n          body.Service.Failover.Datacenters = failover.datacenters;\n        }\n      }\n    }\n    if (typeof service.onlypassing === 'boolean') {\n      body.Service.OnlyPassing = service.onlypassing;\n    }\n    if (service.tags) body.Service.Tags = service.tags;\n  }\n  if (opts.dns) {\n    var dns = utils.normalizeKeys(opts.dns);\n    if (dns.ttl) body.DNS = { TTL: dns.ttl };\n  }\n\n  req.body = body;\n};\n\n/**\n * Module exports.\n */\n\nexports.Query = Query;\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/session.js":"/**\n * Session manipulation\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar errors = require('./errors');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Session` client.\n */\n\nfunction Session(consul) {\n  this.consul = consul;\n}\n\n/**\n * Creates a new session\n */\n\nSession.prototype.create = function(opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'session.create',\n    path: '/session/create',\n    query: {},\n    type: 'json',\n    body: {},\n  };\n\n  if (opts.lockdelay) req.body.LockDelay = opts.lockdelay;\n  if (opts.name) req.body.Name = opts.name;\n  if (opts.node) req.body.Node = opts.node;\n  if (opts.checks) req.body.Checks = opts.checks;\n  if (opts.behavior) req.body.Behavior = opts.behavior;\n  if (opts.ttl) req.body.TTL = opts.ttl;\n\n  utils.options(req, opts);\n\n  this.consul._put(req, utils.body, callback);\n};\n\n/**\n * Destroys a given session\n */\n\nSession.prototype.destroy = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { id: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'session.destroy',\n    path: '/session/destroy/{id}',\n    params: { id: opts.id },\n    query: {},\n  };\n\n  if (!opts.id) {\n    return callback(this.consul._err(errors.Validation('id required'), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._put(req, utils.empty, callback);\n};\n\n/**\n * Queries a given session\n */\n\nSession.prototype.info = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { id: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'session.info',\n    path: '/session/info/{id}',\n    params: { id: opts.id },\n    query: {},\n  };\n\n  if (!opts.id) {\n    return callback(this.consul._err(errors.Validation('id required'), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.bodyItem, callback);\n};\n\nSession.prototype.get = Session.prototype.info;\n\n/**\n * Lists sessions belonging to a node\n */\n\nSession.prototype.node = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { node: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'session.node',\n    path: '/session/node/{node}',\n    params: { node: opts.node },\n  };\n\n  if (!opts.node) {\n    return callback(this.consul._err(errors.Validation('node required'), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Lists all the active sessions\n */\n\nSession.prototype.list = function(opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'session.list',\n    path: '/session/list',\n  };\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Renews a TTL-based session\n */\n\nSession.prototype.renew = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { id: opts };\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'session.renew',\n    path: '/session/renew/{id}',\n    params: { id: opts.id },\n  };\n\n  if (!opts.id) {\n    return callback(this.consul._err(errors.Validation('id required'), req));\n  }\n\n  utils.options(req, opts);\n\n  this.consul._put(req, utils.body, callback);\n};\n\n/**\n * Module exports.\n */\n\nexports.Session = Session;\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/status.js":"/**\n * Status information\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Status` client.\n */\n\nfunction Status(consul) {\n  this.consul = consul;\n}\n\n/**\n * Returns the current Raft leader.\n */\n\nStatus.prototype.leader = function(opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'status.leader',\n    path: '/status/leader',\n  };\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Returns the current Raft peer set\n */\n\nStatus.prototype.peers = function(opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = utils.normalizeKeys(opts);\n  opts = utils.defaults(opts, this.consul._defaults);\n\n  var req = {\n    name: 'status.peers',\n    path: '/status/peers',\n  };\n\n  utils.options(req, opts);\n\n  this.consul._get(req, utils.body, callback);\n};\n\n/**\n * Module exports.\n */\n\nexports.Status = Status;\n","/home/travis/build/npmtest/node-npmtest-consul/node_modules/consul/lib/watch.js":"/**\n * Watch.\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar events = require('events');\nvar util = require('util');\n\nvar errors = require('./errors');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Watch` instance.\n */\n\nfunction Watch(consul, opts) {\n  var self = this;\n\n  events.EventEmitter.call(self);\n\n  opts = utils.normalizeKeys(opts);\n\n  var options = utils.normalizeKeys(opts.options || {});\n  options = utils.defaults(options, consul._defaults);\n  options.wait = options.wait || '30s';\n  options.index = options.index || '0';\n\n  self._context = { consul: consul };\n  self._options = options;\n  self._attempts = 0;\n  self._method = opts.method;\n\n  if (typeof opts.method !== 'function') {\n    throw errors.Validation('method required');\n  }\n\n  process.nextTick(function() { self._run(); });\n}\n\nutil.inherits(Watch, events.EventEmitter);\n\n/**\n * Object meta\n */\n\nWatch.meta = {};\n\n/**\n * Is running\n */\n\nWatch.meta.isRunning = { type: 'sync' };\n\nWatch.prototype.isRunning = function() {\n  return !this._end;\n};\n\n/**\n * Update time\n */\n\nWatch.meta.updateTime = { type: 'sync' };\n\nWatch.prototype.updateTime = function() {\n  return this._updateTime;\n};\n\n/**\n * End watch\n */\n\nWatch.meta.end = { type: 'sync' };\n\nWatch.prototype.end = function() {\n  if (this._end) return;\n  this._end = true;\n\n  this.emit('cancel');\n  this.emit('end');\n};\n\n/**\n * Wait\n */\n\nWatch.prototype._wait = function() {\n  return Math.min(Math.pow(2, ++this._attempts), 256) * 100;\n};\n\n/**\n * Error helper\n */\n\nWatch.prototype._err = function(err, res) {\n  var self = this;\n\n  if (self._end) return;\n\n  self.emit('error', err, res);\n\n  if (res && res.statusCode === 400) return self.end();\n\n  utils.setTimeoutContext(function() { self._run(); }, self, self._wait());\n};\n\n/**\n * Run\n */\n\nWatch.prototype._run = function() {\n  var self = this;\n\n  if (self._end) return;\n\n  var opts = utils.clone(self._options);\n  opts.ctx = self;\n\n  try {\n    self._method.call(self._context, opts, function(err, data, res) {\n      if (err) {\n        return self._err(err, res);\n      }\n\n      self._updateTime = +new Date();\n\n      self._attempts = 0;\n\n      var newIndex = res.headers['x-consul-index'];\n\n      if (utils.hasIndexChanged(newIndex, self._options.index)) {\n        self._options.index = newIndex;\n\n        self.emit('change', data, res);\n      }\n\n      process.nextTick(function() { self._run(); });\n    });\n  } catch (err) {\n    self._err(err);\n  }\n};\n\n/**\n * Module exports.\n */\n\nexports.Watch = Watch;\n"}